{"version":3,"sources":["types/Section.ts","store/cardsSlice.tsx","components/Main/Main.css.ts","components/CardPreview/CardPreview.css.ts","types/SectionTitles.ts","components/Card/Card.css.ts","components/Card/BackButton/BackButton.tsx","components/Card/ForwardButton/ForwardButton.tsx","components/Card/Card.tsx","store/appSlice.tsx","components/CardPreview/Labels/Labels.tsx","components/CardForm/CardForm.css.ts","components/CardPreview/CardPreview.tsx","components/Main/Row/Row.tsx","components/Main/Main.tsx","components/AppBar/AppBar/AppBar.css.ts","components/AppBar/SearchField/SearchField.tsx","components/About/About.css.ts","components/About/AboutDialog/AboutDialog.tsx","components/About/AboutButton /AboutButton.tsx","components/AppBar/AddCardButton/AddCardButton.tsx","components/AppBar/HomeButton/HomeButton.tsx","components/AppBar/AppBar/AppBar.tsx","utils/dynamo-json-parser.ts","App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx"],"names":["Section","initialState","cards","selectedCard","selectedSection","Why","updatedCard","undefined","visibleCardsIds","cardsSlice","createSlice","name","reducers","addCard","state","action","cardLabels","payload","card","labels","filter","label","map","trim","push","addVisibleCardId","visibleCardId","removeVisibleCardId","id","editCard","unedittedCards","removeCard","replaceSelectedCard","setSelectedCard","setSelectedSection","section","setUpdatedCard","setVisibleCardIds","actions","cardsSelector","selectedCardSelector","selectedSectionSelector","selectedSectionContentSelector","sections","why","What","what","How","how","Results","results","visibleCardsIdsSelector","useStyles","makeStyles","theme","root","flexGrow","marginTop","padding","spacing","textAlign","color","palette","text","secondary","grid","minWidth","position","height","editAreaContainer","bottom","display","justifyContent","paddingLeft","paddingRight","editIcon","labelContainer","paddingBlock","flexWrap","container","margin","dialog","top","bullet","transform","info","fontSize","authors","removeDialogBox","title","lineHeight","sectionTitles","arrows","body","marginLeft","marginRight","whiteSpace","overflow","header","backgroundColor","minHeight","icon","pos","marginBottom","BackButton","classes","dispatch","useDispatch","useSelector","onPreviousSectionClick","IconButton","disabled","className","onClick","ForwardButton","onNextSectionClick","CardDialog","selectedContent","Card","variant","CardHeader","align","subheader","Typography","journal","date","join","CardActions","CardContent","component","Fragment","appSlice","searchTerm","setSearchTerm","searchTermSelector","app","Labels","Container","idx","length","Button","cardsIds","_","includes","toLowerCase","onLabelClick","size","textField","CardPreview","React","useState","openCardDialog","setOpenCardDialog","Grid","item","xs","CardActionArea","gutterBottom","process","Dialog","paper","fullWidth","maxWidth","onClose","open","Row","Main","originalCards","setCards","useEffect","createStyles","aboutIcon","common","white","appbar","chip","grow","homeButton","textTransform","menuButton","breakpoints","up","search","borderRadius","shape","fade","width","searchIcon","pointerEvents","alignItems","inputRoot","inputInput","transition","transitions","create","SearchField","InputBase","value","placeholder","input","inputProps","onChange","event","query","target","labelIndexLocation","indexOf","labelTerm","slice","borderWidth","borderColor","borderStyle","AboutDialog","DialogContent","style","Box","fontStyle","AboutButton","openAboutDialog","setOpenAboutDialog","AddCardButton","HomeButton","ids","noWrap","Chip","CardAppBar","AppBar","background","Toolbar","papers","require","muiTheme","createMuiTheme","typography","fontFamily","App","parseDynamoJSON","dynamoCard","forEach","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1d44302.chunk.js","sourcesContent":["export enum Section {\n    Why = 0,\n    What,\n    How,\n    Results\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {RootState} from \"./store\"\nimport {Card} from \"../types/Card\";\nimport {Section} from \"../types/Section\";\n\n// Define a type for the slice state\ninterface CardsState {\n    cards: Array<Card>,\n    selectedCard: string,\n    selectedSection: Section,\n    updatedCard?: Card,\n    visibleCardsIds: Array<string>,\n}\n\n// Define the initial state using that type\nconst initialState: CardsState = {\n    cards: [],\n    selectedCard: \"\",\n    selectedSection: Section.Why,\n    updatedCard: undefined,\n    visibleCardsIds: [],\n}\n\nexport const cardsSlice = createSlice({\n        name: 'cards',\n        // `createSlice` will infer the state type from the `initialState` argument\n        initialState,\n        reducers: {\n            addCard: (state, action: PayloadAction<{ card: Card }>) => {\n                const cardLabels = action.payload.card.labels.filter( (label: string) => { return label }).map( (label: string) => label.trim());\n                state.cards.push( {...action.payload.card, labels: cardLabels});\n            },\n            addVisibleCardId: (state, action: PayloadAction<{ visibleCardId: string }>) => {\n                state.visibleCardsIds.push(action.payload.visibleCardId);\n            },\n            removeVisibleCardId: (state, action: PayloadAction<{ visibleCardId: string }>) => {\n                state.visibleCardsIds = state.visibleCardsIds.filter( (id: string) => {\n                    return (action.payload.visibleCardId !== id)\n                })\n            },\n            editCard: (state, action: PayloadAction<{ card: Card }>) => {\n                const unedittedCards = state.cards.filter( (card: Card) => {\n                    return (card.id !== action.payload.card.id)\n                });\n                state.cards = [...unedittedCards, action.payload.card]\n            },\n            removeCard: (state, action: PayloadAction<{ id: string }>) => {\n                state.cards = state.cards.filter((card) => {\n                    return (card.id !== action.payload.id)\n                })\n            },\n            replaceSelectedCard: (state, action: PayloadAction<{ card: Card}>) => {\n                state.cards = state.cards.map( (card) => {\n                    if (card.id !== state.selectedCard) return card;\n                    else return action.payload.card;\n                })\n\n            },\n            setSelectedCard: (state, action: PayloadAction<{ id: string }>) => {\n                state.selectedCard = action.payload.id;\n            },\n            setSelectedSection: (state, action: PayloadAction<{ section: Section }>) => {\n                state.selectedSection = action.payload.section;\n            },\n            setUpdatedCard: (state, action: PayloadAction<{ updatedCard: Card}>) => {\n                state.updatedCard = action.payload.updatedCard;\n            },\n            setVisibleCardIds: (state, action: PayloadAction<{visibleCardsIds: Array<string>}>) => {\n                state.visibleCardsIds = action.payload.visibleCardsIds;\n            }\n        }\n    }\n)\n\nexport const { addCard, addVisibleCardId, editCard, removeCard, replaceSelectedCard, setSelectedCard, setSelectedSection, setVisibleCardIds } = cardsSlice.actions\n\n\n// @ts-ignore\nexport const cardsSelector = (state: RootState) => {\n    return state.cards.cards\n}\nexport const selectedCardSelector = (state: RootState) => {\n    return state.cards.cards.filter( (card) => {\n        return (card.id === state.cards.selectedCard)\n    })[0];\n}\nexport const selectedCardIdSelector = (state: RootState) => {\n    return state.cards.selectedCard\n}\nexport const selectedSectionSelector = (state: RootState) => {\n    return state.cards.selectedSection;\n}\n\nexport const selectedSectionContentSelector = (state: RootState) => {\n    const selectedCard = state.cards.cards.filter( (card) => {\n        return (card.id === state.cards.selectedCard)\n    })[0]\n    if (!selectedCard) return \"\";\n    switch(state.cards.selectedSection) {\n        case Section.Why:\n            return selectedCard.sections.why;\n        case Section.What:\n            return selectedCard.sections.what;\n        case Section.How:\n            return selectedCard.sections.how;\n        case Section.Results:\n            return selectedCard.sections.results;\n        default:\n            return \"\";\n    }\n}\n\nexport const visibleCardsIdsSelector = (state: RootState) => {\n    return (state.cards.visibleCardsIds)\n}\n\nexport default cardsSlice.reducer","import {makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: \"80px\",\n        // alignContent: \"stretch\"\n    },\n    card: {\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    grid: {\n        marginTop: \"40px\"\n    }\n}));","import {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 400,\n        position: \"relative\",\n        textAlign: \"center\",\n        height: \"100%\",\n    },\n    editAreaContainer: {\n        position: \"absolute\",\n        bottom: \"5px\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        paddingLeft: \"0px\",\n        paddingRight: \"0px\"\n    },\n    editIcon: {\n        color: \"#6573c3\"\n    },\n    labelContainer: {\n      paddingBlock: \"6px\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n    },\n    container: {\n        height: \"100%\",\n        margin: \"12px\",\n\n    },\n    dialog: {\n        position: 'absolute',\n        top: \"0px\"\n    },\n    labels: {\n        position: \"relative\",\n        bottom: \"2px\",\n        color: \"#6573c3\",\n        margin: \"2px\"\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    info: {\n        fontSize: 14,\n    },\n    authors: {\n        marginTop: 12,\n        fontSize: 14,\n    },\n    removeDialogBox: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n    },\n    title: {\n        lineHeight: 1.2,\n    }\n}));\n\nexport default useStyles;","const sectionTitles = [\n    \"Why is this work important?\",\n    \"How does this work differ from other works?\",\n    \"What do they propose?\",\n    \"What are the results?\"\n]\n\nexport default sectionTitles;","import {makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    arrows: {\n        justifyContent: \"space-between\"\n    },\n    body: {\n        marginLeft: 20,\n        marginRight: 20,\n        whiteSpace: 'pre-line',\n        overflow: \"auto\",\n    },\n    header: {\n        backgroundColor: \"#6573c3\",\n        color: \"white\",\n        whiteSpace: 'pre-line'\n    },\n    root: {\n        minWidth: 275,\n        minHeight: 350,\n        overflow: 'auto',\n\n    },\n    icon: {\n        color: \"#6573c3\",\n        marginRight: \"10px\",\n        marginLeft: \"10px\"\n    },\n    text: {\n        // padding: \"28 px\",\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginTop: -70,\n        marginBottom: 24,\n        flexGrow: 1,\n        textAlign: 'center',\n    },\n});","import IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport React from \"react\";\nimport {cardsSlice, selectedSectionSelector} from \"../../../store/cardsSlice\";\nimport {Section} from \"../../../types/Section\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useStyles} from \"../Card.css\";\n\n\nexport const BackButton = () => {\n\n    const classes = useStyles();\n\n    const dispatch = useDispatch();\n\n    const selectedSection = useSelector(selectedSectionSelector);\n\n    const onPreviousSectionClick = () => {\n        if (selectedSection - 1 === -1) return;\n        else {\n            dispatch(cardsSlice.actions.setSelectedSection({section: (selectedSection - 1) as Section}))\n        }\n    };\n\n    if (selectedSection === 0) return (\n        <IconButton disabled className={classes.icon} onClick={onPreviousSectionClick}>\n            <ArrowBackIcon fontSize={\"large\"}/>\n        </IconButton>\n    )\n    else {\n        return (\n            <IconButton className={classes.icon} onClick={onPreviousSectionClick}>\n                <ArrowBackIcon fontSize={\"large\"}/>\n            </IconButton>)\n    }\n\n}","import {cardsSlice, selectedSectionSelector} from \"../../../store/cardsSlice\";\nimport {Section} from \"../../../types/Section\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useStyles} from \"../Card.css\";\n\nexport const ForwardButton = () => {\n\n    const classes = useStyles();\n\n    const selectedSection = useSelector(selectedSectionSelector)\n\n    const dispatch = useDispatch();\n\n    const onNextSectionClick = () => {\n        if (selectedSection + 1 === 4) return;\n        else {\n            dispatch(cardsSlice.actions.setSelectedSection({section: (selectedSection + 1) as Section}));\n        }\n    };\n\n    if (selectedSection === 3) return (\n        <IconButton disabled className={classes.icon} onClick={onNextSectionClick}>\n            <ArrowForwardIcon fontSize={\"large\"}/>\n        </IconButton>\n    )\n    else {\n        return (\n            <IconButton className={classes.icon} onClick={onNextSectionClick}>\n                <ArrowForwardIcon fontSize={\"large\"}/>\n            </IconButton>)\n    }\n}","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport {CardHeader} from \"@material-ui/core\";\nimport {useSelector} from \"react-redux\";\nimport {selectedCardSelector, selectedSectionContentSelector, selectedSectionSelector} from \"../../store/cardsSlice\";\nimport sectionTitles from \"../../types/SectionTitles\";\nimport {useStyles} from \"./Card.css\";\nimport {BackButton} from \"./BackButton/BackButton\";\nimport {ForwardButton} from \"./ForwardButton/ForwardButton\";\n\nexport default function CardDialog() {\n    const classes = useStyles();\n\n    const selectedCard = useSelector(selectedCardSelector);\n    const selectedContent = useSelector(selectedSectionContentSelector);\n    const selectedSection = useSelector(selectedSectionSelector)\n\n    if (!selectedCard || !selectedContent) return <React.Fragment/>;\n\n    return (\n        <Card className={classes.root} variant=\"outlined\">\n            <CardHeader align=\"center\" className={classes.header} title={selectedCard.title} subheader={<Typography>{[selectedCard.authors, \"\\n\", selectedCard.journal, selectedCard.date].join(\" \")}</Typography>}/>\n            <CardActions className={classes.arrows}>\n                <BackButton/>\n                <ForwardButton/>\n            </CardActions>\n            <CardContent>\n                <Typography className={classes.pos} variant=\"h6\" component=\"h2\">\n                    {sectionTitles[selectedSection]}\n                </Typography>\n                <Typography align={\"justify\"} className={classes.body} >\n                    {selectedContent}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {RootState} from \"./store\";\n\ninterface AppState {\n    searchTerm: string\n}\n\nconst initialState: AppState = {\n    searchTerm: \"\"\n}\n\nexport const appSlice = createSlice({\n    name: \"app\",\n    initialState,\n    reducers: {\n        setSearchTerm: (state: AppState, action: PayloadAction<{searchTerm: string}>) => {\n            state.searchTerm = action.payload.searchTerm\n        }\n    }\n})\n\nexport const { setSearchTerm } = appSlice.actions\n\nexport const searchTermSelector = (state: RootState) => {\n    return state.app.searchTerm\n}","import Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport useStyles from \"../CardPreview.css\";\nimport {Card} from \"../../../types/Card\";\nimport * as _ from \"lodash\";\nimport {cardsSelector, cardsSlice} from \"../../../store/cardsSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appSlice} from \"../../../store/appSlice\";\n\ntype LabelsProps = {\n    card: Card\n}\nexport const Labels = ( {card}: LabelsProps) => {\n\n    const classes = useStyles();\n\n    const dispatch = useDispatch();\n\n    const cards = useSelector(cardsSelector);\n\n    const onLabelClick = (label: string) => {\n        const cardsIds: Array<string> = [];\n        _.forEach(cards, (card: Card) =>\n        {\n            if (card.labels.includes(label)) cardsIds.push(card.id)\n        })\n        dispatch(cardsSlice.actions.setVisibleCardIds({visibleCardsIds: cardsIds }))\n        dispatch(appSlice.actions.setSearchTerm({searchTerm: `label:${label.toLowerCase()}`}))\n    }\n\n    return (\n        <Container className={classes.labelContainer}>\n            {card.labels.map( (label: string, idx: number) => {\n                if (label.length) return (\n                    <Button key={label} onClick={() => onLabelClick(label)} className={classes.labels} size=\"small\" variant=\"outlined\">\n                        {label}\n                    </Button>\n                )\n                else {\n                    return <React.Fragment key={idx} />\n                }\n            })}\n        </Container>\n    )\n}","import makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        minHeight: 350,\n        overflow: 'auto',\n\n    },\n    textField: {\n        margin: 8,\n    },\n})","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from \"./CardPreview.css\"\nimport Grid from \"@material-ui/core/Grid\";\nimport {Card as CardType} from \"../../types/Card\";\nimport {useDispatch} from \"react-redux\";\nimport {cardsSlice} from \"../../store/cardsSlice\";\nimport {Section} from \"../../types/Section\";\nimport {CardActionArea} from \"@material-ui/core\";\nimport CardDialog from \"../Card/Card\"\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Container from \"@material-ui/core/Container\";\nimport {Labels} from \"./Labels/Labels\";\nimport {EditRemoveArea} from \"./EditRemoveArea/EditRemoveArea\";\n\ntype CardPreviewsProps = {\n    card: CardType\n}\n\nexport default function CardPreview({card}: CardPreviewsProps) {\n    const classes = useStyles();\n\n    const dispatch = useDispatch();\n\n    const [openCardDialog, setOpenCardDialog] = React.useState<boolean>(false)\n\n    const onCardTitleClick = () => {\n        setOpenCardDialog(true);\n        dispatch(cardsSlice.actions.setSelectedCard({id: card.id}))\n        dispatch(cardsSlice.actions.setSelectedSection({section: Section.Why}))\n    }\n\n    const onDialogClose = () => {\n        setOpenCardDialog(false);\n        dispatch(cardsSlice.actions.setSelectedCard({id: \"\"}))\n    }\n\n    return (\n        <React.Fragment>\n            <Grid key={card.id} item xs={4}>\n                <Container className={classes.container}>\n                    <Card variant=\"outlined\" className={classes.root} >\n                    <Labels card={card}/>\n                    <CardActionArea onClick={onCardTitleClick}>\n                        <CardContent>\n                            <Typography className={classes.title} align=\"center\" variant=\"h6\" component=\"h2\">\n                                {card.title}\n                            </Typography>\n                            <Typography className={classes.authors} align=\"center\" color=\"textSecondary\">\n                                {card.authors}\n                            </Typography>\n                            <Typography className={classes.info} align=\"center\" color=\"textSecondary\" gutterBottom>\n                                {[card.journal, card.date].join(\", \")}\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                        {process.env.NODE_ENV === \"development\" && <EditRemoveArea id={card.id}/>}\n                    </Card>\n                </Container>\n            </Grid>\n            <Dialog  classes={{\n                paper: classes.dialog\n            }} fullWidth={true} maxWidth=\"lg\" onClose={onDialogClose} open={openCardDialog}>\n                <CardDialog/>\n            </Dialog >\n\n        </React.Fragment>\n\n\n\n    );\n}","import Grid from \"@material-ui/core/Grid\";\nimport React from \"react\";\nimport CardPreview from \"../../CardPreview/CardPreview\";\nimport {Card} from \"../../../types/Card\";\n\ntype RowProps = {\n    cards: Array<Card>\n    id: string\n}\n\nexport const Row = ( {cards, id}: RowProps) => {\n\n    return (\n        <Grid key={id} container item xs={12} spacing={3}>\n            { cards.map( (card: Card) => {\n                return (<React.Fragment key={card.id}>\n                    <CardPreview card={card}/>\n                </React.Fragment>) })}\n        </Grid>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport * as _ from \"lodash\";\nimport {useSelector} from \"react-redux\";\nimport {cardsSelector, visibleCardsIdsSelector} from \"../../store/cardsSlice\";\nimport {Card} from \"../../types/Card\";\nimport {useStyles} from \"./Main.css\";\nimport {Row} from \"./Row/Row\";\n\nconst Main = () => {\n\n    const classes = useStyles();\n\n    const cardsPerRow = 3; // number of cards you'd like to see in a row\n\n    const originalCards = useSelector(cardsSelector);\n\n    const visibleCardsIds = useSelector(visibleCardsIdsSelector);\n\n    const [cards, setCards] = useState<Array<Card>>(originalCards);\n\n    useEffect( () => {\n        setCards(_.filter(originalCards, (card: Card) => {\n            return (visibleCardsIds.includes(card.id))\n        }))\n    }, [originalCards, visibleCardsIds])\n\n    return (\n            <div className={classes.root}>\n                <Grid container spacing={1}>\n                    {_.chunk(cards, cardsPerRow).map( (cards: Array<Card>) => { return (<React.Fragment key={cards[0].id}><Row id={cards[0].id} cards={cards}/></React.Fragment>)})}\n                </Grid>\n            </div>\n    )\n}\n\nexport default Main;","import {createStyles, fade, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        aboutIcon: {\n                color: theme.palette.common.white\n        },\n        appbar: {\n            color:\"#6573c3\"\n        },\n        chip: {color: \"white\", fontSize:\"large\"},\n        grow: {\n            flexGrow: 1,\n        },\n        homeButton: {\n            textTransform: \"none\"\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            display: 'none',\n            [theme.breakpoints.up('sm')]: {\n                display: 'block',\n            },\n            color: theme.palette.common.white\n        },\n        search: {\n            position: 'relative',\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: fade(theme.palette.common.white, 0.15),\n            '&:hover': {\n                backgroundColor: fade(theme.palette.common.white, 0.25),\n            },\n            marginRight: theme.spacing(2),\n            marginLeft: 0,\n            width: '100%',\n            [theme.breakpoints.up('sm')]: {\n                marginLeft: theme.spacing(17),\n                width: \"30%\",\n            },\n        },\n        searchIcon: {\n            padding: theme.spacing(0, 2),\n            height: '100%',\n            position: 'absolute',\n            pointerEvents: 'none',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        inputRoot: {\n            color: 'inherit',\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 0),\n            // vertical padding + font size from searchIcon\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n            transition: theme.transitions.create('width'),\n            [theme.breakpoints.up('md')]: {\n                width: '55ch',\n            },\n        },\n    }),\n);","import SearchIcon from \"@material-ui/icons/Search\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport React, {ChangeEvent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {cardsSelector, cardsSlice} from \"../../../store/cardsSlice\";\nimport {useStyles} from \"../AppBar/AppBar.css\";\nimport {Card} from \"../../../types/Card\";\nimport * as _ from \"lodash\"\nimport {appSlice, searchTermSelector} from \"../../../store/appSlice\";\n\nexport const SearchField = () => {\n    const classes = useStyles();\n\n    const cards = useSelector(cardsSelector);\n\n    const searchTerm = useSelector(searchTermSelector);\n\n    const dispatch = useDispatch();\n\n    const handleSearch = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        const query = event.target.value;\n        dispatch(appSlice.actions.setSearchTerm({searchTerm: query}))\n        const cardsIds: Array<string> = [];\n        const labelIndexLocation = query.indexOf(\"label:\");\n        let labelTerm = \"\";\n        if (labelIndexLocation !== -1) {\n            labelTerm = query.slice(labelIndexLocation+6);\n        }\n        _.forEach(cards, (card: Card) =>\n        {\n            if ((card.title).toLowerCase().indexOf(query.toLowerCase()) > -1 || (card.authors).toLowerCase().indexOf(query.toLowerCase()) > -1) {\n                cardsIds.push(card.id)\n            }\n            if (labelIndexLocation !== -1 && labelTerm && (card.labels).map((label: string) => label.toLowerCase()).includes(labelTerm)) {\n                cardsIds.push(card.id)\n            }\n        })\n        dispatch(cardsSlice.actions.setVisibleCardIds({visibleCardsIds: cardsIds }))\n    }\n\n    return(\n        <div className={classes.search}>\n            <div className={classes.searchIcon}>\n                <SearchIcon />\n            </div>\n            <InputBase\n                value={searchTerm}\n                placeholder=\"Search…\"\n                classes={{\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n                onChange={handleSearch}\n            />\n        </div>\n    )\n}","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n                borderWidth: 10,\n                borderColor: \"#6573c3\",\n                borderStyle: \"solid\",\n                backgroundColor: \"#fff\",\n                color: \"#101010\"\n            },\n        text: {\n            // color: \"white\"\n        },\n    }))\n","import React from \"react\"\nimport {Dialog} from \"@material-ui/core\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {useStyles} from \"../About.css\";\nimport Box from \"@material-ui/core/Box\";\n\ntype AboutDialogProps = {\n    onClose: () => void;\n    open: boolean;\n}\n\nexport const AboutDialog = ({ onClose, open }: AboutDialogProps) => {\n\n    const classes = useStyles();\n\n    return <Dialog   maxWidth=\"lg\" onClose={onClose} open={open}>\n        <DialogContent className={classes.paper}>\n            <Grid style={{display: 'inline-block'}} container>\n                <Typography className={classes.text}>\n                    Hi there! Here's a bit of information about why I made this web app.\n                </Typography>\n                <br/>\n                <Typography className={classes.text}>\n                    After reading a paper, I usually write down the answer to these four questions:\n                </Typography>\n                <br/>\n                <Typography component=\"div\" >\n                    <Box fontStyle=\"italic\">\n                    Q1: \"Why is this work important?\" </Box>\n                </Typography>\n                <Typography className={classes.text}>\n                    This gives me a sense of the application of the paper and why it is important. It helps me put things into context and understand the rest of the content of the paper better.\n                </Typography>\n                <br/>\n                <Typography component=\"div\">  <Box fontStyle=\"italic\">\n                    Q2: \"How is this work different from other existing works?\" </Box></Typography>\n                <Typography className={classes.text}>\n                    This tells us what is new or different about the method proposed by the authors, when comparing against the rest of the current literature. This should point out the key contribution of the paper.\n                </Typography>\n                <br/>\n                <Typography component=\"div\">\n                    <Box fontStyle=\"italic\">\n                    Q3: \"What do they propose?\" </Box></Typography>\n                <Typography className={classes.text}>\n                    This answer delves into some of the technical details of the paper, although it still tries to avoid the nitty-gritty and fouses on the big picture idea.\n                </Typography>\n                <br/>\n                <Typography component=\"div\">    <Box fontStyle=\"italic\">\n                    Q4: \"What are the results?\" </Box>\n                </Typography>\n                <Typography className={classes.text}>\n                    This provides the interesting or significant results that are particularly important. Any additional comments or thoughts I have would be written there as well.\n                </Typography>\n                <br/>\n                <br/>\n                <Typography className={classes.text}>\n                    Whenever I need to refresh my memory about a given paper, I read the answers to these four questions. This web app allows me to store all of these summaries in a single place.\n                </Typography>\n            </Grid>\n        </DialogContent>\n        {/*<DialogContent >*/}\n        {/*    /!*<Grid container spacing={2}>*!/*/}\n        {/*    /!*    <Grid item xs={6}>*!/*/}\n        {/*    /!*        <Grid container></Grid>*!/*/}\n        {/*    /!*    </Grid>*!/*/}\n        {/*    /!*</Grid>*!/*/}\n        {/*</DialogContent>*/}\n    </Dialog>\n}","import React, {useState} from \"react\"\nimport {Button} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {useStyles} from \"../../AppBar/AppBar/AppBar.css\";\nimport InfoIcon from '@material-ui/icons/Info';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {AboutDialog} from \"../AboutDialog/AboutDialog\";\n\nexport const AboutButton = () => {\n    const classes = useStyles();\n\n    const [openAboutDialog, setOpenAboutDialog] = useState<boolean>(false);\n\n    const onAboutButtonClick = () => {\n        setOpenAboutDialog(true)\n    }\n    const onAboutDialogClose = () => {\n        setOpenAboutDialog(false)\n    }\n    return <React.Fragment>\n        <Button onClick={onAboutButtonClick}>\n            <IconButton>\n                <InfoIcon className={classes.aboutIcon}/>\n            </IconButton>\n            <Typography className={classes.title} >About</Typography>\n        </Button>\n        <AboutDialog onClose={onAboutDialogClose} open={openAboutDialog}/>\n    </React.Fragment>\n}","import {Button} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {useStyles} from \"../AppBar/AppBar.css\";\nimport React, {useState} from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport CardForm from \"../../CardForm/CardForm\";\nimport {AboutButton} from \"../../About/AboutButton /AboutButton\";\n\nexport const AddCardButton = () => {\n    const classes = useStyles();\n\n    const [open, setOpen] = useState<boolean>(false);\n\n    const onClick = () => {\n        setOpen(true);\n    }\n\n    const onClose = () => {\n        setOpen(false)\n    }\n\n    if (process.env.NODE_ENV !== \"development\") return <AboutButton/> //FIXME should be not equal to before deploying\n\n    return (\n        <React.Fragment>\n            <Button onClick={onClick} variant={\"contained\"}  color={\"inherit\"} style={{backgroundColor: \"#6573c3\"}}><Typography className={classes.title} >Add Paper</Typography></Button>\n            <Dialog fullWidth={true} maxWidth=\"lg\" onClose={onClose} open={open} >\n                <CardForm handleClose={onClose}/>\n            </Dialog>\n    </React.Fragment> )\n\n\n}\n","import React from \"react\"\nimport Typography from \"@material-ui/core/Typography\";\nimport {useStyles} from \"../AppBar/AppBar.css\";\nimport {Button} from \"@material-ui/core\";\nimport {appSlice} from \"../../../store/appSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {cardsSelector, cardsSlice, visibleCardsIdsSelector} from \"../../../store/cardsSlice\";\nimport {Card} from \"../../../types/Card\";\nimport Chip from \"@material-ui/core/Chip\";\n\nexport const HomeButton = () => {\n    const classes = useStyles();\n\n    const dispatch = useDispatch();\n\n    const visibleCardsIds = useSelector(visibleCardsIdsSelector);\n    const cards = useSelector(cardsSelector);\n\n    const onHomeButtonClick = () => {\n        dispatch(appSlice.actions.setSearchTerm({searchTerm: \"\"}))\n        //gather all ids and set them all to visible\n        const ids = cards.map((card: Card) => {\n            return (card.id);\n        });\n        dispatch(cardsSlice.actions.setVisibleCardIds({visibleCardsIds: ids}))\n    }\n\n    return (<React.Fragment>\n            <Button className={classes.homeButton} onClick={onHomeButtonClick}>\n                <Typography className={classes.title} variant=\"h5\" noWrap>\n                    Paper Stories\n                </Typography>\n            </Button>\n        {visibleCardsIds.length > 0 && <Chip color={\"primary\"} size={\"medium\"} className={classes.chip} label={visibleCardsIds.length} />}\n    </React.Fragment>\n      )\n}","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport {SearchField} from \"../SearchField/SearchField\";\nimport {useStyles} from \"./AppBar.css\";\nimport {AddCardButton} from \"../AddCardButton/AddCardButton\";\nimport {HomeButton} from \"../HomeButton/HomeButton\";\n\nexport const CardAppBar = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.grow} >\n            <AppBar style={{background: \"#6573c3\"}}>\n                <Toolbar>\n                <HomeButton/>\n                    <SearchField/>\n                    <div className={classes.grow} />\n                    <AddCardButton/>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","import {Card} from \"../types/Card\";\nvar papers = require('../papers.json');\n\n\nexport const dynamoJSONParser = (): Array<Card> => {\n    const cards = papers[\"Items\"].map( (dynamoCard: any) => {\n\n        const date = dynamoCard[\"date\"][\"S\"];\n        const journal = dynamoCard[\"journal\"][\"S\"];\n        const labels = dynamoCard[\"labels\"][\"L\"].map((item: any) => {return item[\"S\"]});\n        const id = dynamoCard[\"id\"][\"S\"];\n        const title = dynamoCard[\"title\"][\"S\"];\n        const authors = dynamoCard[\"authors\"][\"S\"];\n\n        const why = dynamoCard[\"sections\"][\"M\"][\"why\"][\"S\"]\n        const how = dynamoCard[\"sections\"][\"M\"][\"how\"][\"S\"]\n        const what = dynamoCard[\"sections\"][\"M\"][\"what\"][\"S\"]\n        const results = dynamoCard[\"sections\"][\"M\"][\"results\"][\"S\"]\n        const sections = {\n            why, what, how, results\n        };\n\n        const card: Card = {\n            id,\n            authors,\n            date,\n            journal,\n            labels,\n            title,\n            sections\n        }\n\n        return  card;\n    })\n\n    return cards;\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Container, MuiThemeProvider} from \"@material-ui/core\";\nimport Main from \"./components/Main/Main\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {Card} from \"./types/Card\";\nimport {useDispatch} from \"react-redux\";\nimport {cardsSlice} from \"./store/cardsSlice\";\nimport {CardAppBar} from \"./components/AppBar/AppBar/AppBar\";\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport {dynamoJSONParser} from \"./utils/dynamo-json-parser\";\n\nconst font = \"'Lato'\";\nconst muiTheme = createMuiTheme({\n    typography: {\n        fontFamily: font\n    }\n});\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    // const fetchAndUpdateCards = () => {\n    //     axios.get(\"http://127.0.0.1:8000\").then( (response: AxiosResponse) => {\n    //         response.data.forEach( (card: Card) => {\n    //             dispatch(cardsSlice.actions.addCard({card: card}))\n    //             dispatch(cardsSlice.actions.addVisibleCardId({visibleCardId: card.id}))\n    //         }\n    //         )\n    //     })\n    //         .catch( (error: AxiosError) => {console.log(error)})\n    // }\n\n    const parseDynamoJSON = () => {\n        const cards = dynamoJSONParser();\n\n        cards.forEach( (card: Card) => {\n            dispatch(cardsSlice.actions.addCard({card: card}))\n            dispatch(cardsSlice.actions.addVisibleCardId({visibleCardId: card.id}))\n        })\n    }\n\n    useEffect( () => {\n        // fetchAndUpdateCards()\n        parseDynamoJSON()\n    }, [])\n\n    return (\n        <MuiThemeProvider theme={muiTheme}>\n            <Container maxWidth=\"lg\">\n                <CardAppBar/>\n                <Main/>\n            </Container>\n        </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport {cardsSlice} from \"./cardsSlice\";\nimport {appSlice} from \"./appSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        cards: cardsSlice.reducer,\n        app: appSlice.reducer,\n    },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}